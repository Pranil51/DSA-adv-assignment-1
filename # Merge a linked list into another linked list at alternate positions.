class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class SingleLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def create(self, data):
        new_node = Node(data)
        self.head = new_node
        self.tail = new_node
        self.size = self.size + 1

    def is_empty(self):
        return self.head is None

    def insert(self, data, start=False, end=False, location=0):
        if self.is_empty():
            new_node = Node(data)
            self.head = new_node
            self.tail = new_node
            return
        new_node = Node(data)
        if start:
            new_node.next = self.head
            self.head = new_node
        elif end:
            self.tail.next = new_node
            self.tail = new_node
        else:
            if location == 0 or location == 1 or location >= self.size:
                print("[ERROR] Please enter a proper location")
                return
            temp_node = self.head
            for _ in range(1, location-1):
                temp_node = temp_node.next
            new_node.next = temp_node.next
            temp_node.next = new_node

        self.size = self.size + 1

    def traversal(self):
        current_node = self.head
        while current_node is not None:
            print("{}".format(current_node.data), end=" -> ")
            current_node = current_node.next

ll = SingleLinkedList()
ll.create(10)
ll.insert(20, end=True)
ll.insert(30, end=True)
ll.insert(40, end=True)
ll.insert(50, end=True)
ll2 = SingleLinkedList()
ll2.create("a")
ll2.insert("b", end=True)
ll2.insert("c", end=True)
ll2.insert("d", end=True)
# ll2.insert("e", end=True)
ll.traversal()
ll2.traversal()

l=SingleLinkedList()
def merge(l1,l2,l):
    curr2=l2.head
    curr1=l1.head    
    while curr1 is not None and curr2 is not None:
        l.insert(curr1.data,end=True)
        l.insert(curr2.data,end=True)
        curr1=curr1.next
        curr2=curr2.next
    while curr1 is not None:
        l.insert(curr1.data,end=True)
        curr1=curr1.next
    while curr2 is not None:
        l.insert(curr2.data,end=True)
        curr2=curr2.next
    return l.head.data
a=merge(ll,ll2,l)
l.traversal()
