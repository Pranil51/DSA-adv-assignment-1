#To work 
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class SingleLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def create(self, data):
        new_node = Node(data)
        self.head = new_node
        self.tail = new_node
        self.size = self.size + 1

    def is_empty(self):
        return self.head is None

    def insert(self, data, start=False, end=False, location=0):
        if self.is_empty():
            new_node = Node(data)
            self.head = new_node
            self.tail = new_node
            return
        new_node = Node(data)
        if start:
            new_node.next = self.head
            self.head = new_node
        elif end:
            self.tail.next = new_node
            self.tail = new_node
        else:
            if location == 0 or location == 1 or location >= self.size:
                print("[ERROR] Please enter a proper location")
                return
            temp_node = self.head
            for _ in range(1, location-1):
                temp_node = temp_node.next
            new_node.next = temp_node.next
            temp_node.next = new_node

        self.size = self.size + 1

    def traversal(self):
        current_node = self.head
        while current_node is not None:
            print("{}".format(current_node.data), end=" -> ")
            current_node = current_node.next

def reverse(ll,k):    
    l=SingleLinkedList()    
    current = ll.head
    while current is not None:
        s=[]
        x=0
        while x<k and current is not None:
            s.append(current.data)
            current=current.next
            x=x+1
        for i in range(len(s)):
            pop=s.pop()
            l.insert(pop,end=True)
    return l
a=reverse(ll,2)
a.traversal()    
